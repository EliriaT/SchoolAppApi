// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EliriaT/SchoolAppApi/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/EliriaT/SchoolAppApi/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUserToClass mocks base method.
func (m *MockStore) AddUserToClass(arg0 context.Context, arg1 db.AddUserToClassParams) (db.UserRoleClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToClass", arg0, arg1)
	ret0, _ := ret[0].(db.UserRoleClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToClass indicates an expected call of AddUserToClass.
func (mr *MockStoreMockRecorder) AddUserToClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToClass", reflect.TypeOf((*MockStore)(nil).AddUserToClass), arg0, arg1)
}

// CreateClass mocks base method.
func (m *MockStore) CreateClass(arg0 context.Context, arg1 db.CreateClassParams) (db.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClass", arg0, arg1)
	ret0, _ := ret[0].(db.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClass indicates an expected call of CreateClass.
func (mr *MockStoreMockRecorder) CreateClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockStore)(nil).CreateClass), arg0, arg1)
}

// CreateMark mocks base method.
func (m *MockStore) CreateMark(arg0 context.Context, arg1 db.CreateMarkParams) (db.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMark", arg0, arg1)
	ret0, _ := ret[0].(db.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMark indicates an expected call of CreateMark.
func (mr *MockStoreMockRecorder) CreateMark(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMark", reflect.TypeOf((*MockStore)(nil).CreateMark), arg0, arg1)
}

// CreateRoleForUser mocks base method.
func (m *MockStore) CreateRoleForUser(arg0 context.Context, arg1 db.CreateRoleForUserParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleForUser", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleForUser indicates an expected call of CreateRoleForUser.
func (mr *MockStoreMockRecorder) CreateRoleForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleForUser", reflect.TypeOf((*MockStore)(nil).CreateRoleForUser), arg0, arg1)
}

// CreateRoles mocks base method.
func (m *MockStore) CreateRoles(arg0 context.Context, arg1 db.CreateRolesParams) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoles indicates an expected call of CreateRoles.
func (mr *MockStoreMockRecorder) CreateRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoles", reflect.TypeOf((*MockStore)(nil).CreateRoles), arg0, arg1)
}

// CreateSchool mocks base method.
func (m *MockStore) CreateSchool(arg0 context.Context, arg1 string) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchool indicates an expected call of CreateSchool.
func (mr *MockStoreMockRecorder) CreateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchool", reflect.TypeOf((*MockStore)(nil).CreateSchool), arg0, arg1)
}

// CreateSemester mocks base method.
func (m *MockStore) CreateSemester(arg0 context.Context, arg1 db.CreateSemesterParams) (db.Semester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSemester", arg0, arg1)
	ret0, _ := ret[0].(db.Semester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSemester indicates an expected call of CreateSemester.
func (mr *MockStoreMockRecorder) CreateSemester(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSemester", reflect.TypeOf((*MockStore)(nil).CreateSemester), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteMark mocks base method.
func (m *MockStore) DeleteMark(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMark", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMark indicates an expected call of DeleteMark.
func (mr *MockStoreMockRecorder) DeleteMark(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMark", reflect.TypeOf((*MockStore)(nil).DeleteMark), arg0, arg1)
}

// DeleteSchool mocks base method.
func (m *MockStore) DeleteSchool(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchool indicates an expected call of DeleteSchool.
func (mr *MockStoreMockRecorder) DeleteSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchool", reflect.TypeOf((*MockStore)(nil).DeleteSchool), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetClassById mocks base method.
func (m *MockStore) GetClassById(arg0 context.Context, arg1 int64) (db.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassById", arg0, arg1)
	ret0, _ := ret[0].(db.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassById indicates an expected call of GetClassById.
func (mr *MockStoreMockRecorder) GetClassById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassById", reflect.TypeOf((*MockStore)(nil).GetClassById), arg0, arg1)
}

// GetClassWithStudents mocks base method.
func (m *MockStore) GetClassWithStudents(arg0 context.Context, arg1 int64) ([]db.GetClassWithStudentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassWithStudents", arg0, arg1)
	ret0, _ := ret[0].([]db.GetClassWithStudentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassWithStudents indicates an expected call of GetClassWithStudents.
func (mr *MockStoreMockRecorder) GetClassWithStudents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassWithStudents", reflect.TypeOf((*MockStore)(nil).GetClassWithStudents), arg0, arg1)
}

// GetCurrentSemester mocks base method.
func (m *MockStore) GetCurrentSemester(arg0 context.Context) (db.Semester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSemester", arg0)
	ret0, _ := ret[0].(db.Semester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSemester indicates an expected call of GetCurrentSemester.
func (mr *MockStoreMockRecorder) GetCurrentSemester(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSemester", reflect.TypeOf((*MockStore)(nil).GetCurrentSemester), arg0)
}

// GetMarkByID mocks base method.
func (m *MockStore) GetMarkByID(arg0 context.Context, arg1 int64) (db.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkByID", arg0, arg1)
	ret0, _ := ret[0].(db.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkByID indicates an expected call of GetMarkByID.
func (mr *MockStoreMockRecorder) GetMarkByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkByID", reflect.TypeOf((*MockStore)(nil).GetMarkByID), arg0, arg1)
}

// GetRolebyId mocks base method.
func (m *MockStore) GetRolebyId(arg0 context.Context, arg1 int64) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolebyId", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolebyId indicates an expected call of GetRolebyId.
func (mr *MockStoreMockRecorder) GetRolebyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolebyId", reflect.TypeOf((*MockStore)(nil).GetRolebyId), arg0, arg1)
}

// GetRoles mocks base method.
func (m *MockStore) GetRoles(arg0 context.Context) ([]db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0)
	ret0, _ := ret[0].([]db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockStoreMockRecorder) GetRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockStore)(nil).GetRoles), arg0)
}

// GetSchoolbyId mocks base method.
func (m *MockStore) GetSchoolbyId(arg0 context.Context, arg1 int64) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolbyId", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolbyId indicates an expected call of GetSchoolbyId.
func (mr *MockStoreMockRecorder) GetSchoolbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolbyId", reflect.TypeOf((*MockStore)(nil).GetSchoolbyId), arg0, arg1)
}

// GetSchoolbyName mocks base method.
func (m *MockStore) GetSchoolbyName(arg0 context.Context, arg1 string) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolbyName", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolbyName indicates an expected call of GetSchoolbyName.
func (mr *MockStoreMockRecorder) GetSchoolbyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolbyName", reflect.TypeOf((*MockStore)(nil).GetSchoolbyName), arg0, arg1)
}

// GetSemesterbyId mocks base method.
func (m *MockStore) GetSemesterbyId(arg0 context.Context, arg1 int64) (db.Semester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSemesterbyId", arg0, arg1)
	ret0, _ := ret[0].(db.Semester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSemesterbyId indicates an expected call of GetSemesterbyId.
func (mr *MockStoreMockRecorder) GetSemesterbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSemesterbyId", reflect.TypeOf((*MockStore)(nil).GetSemesterbyId), arg0, arg1)
}

// GetSemesters mocks base method.
func (m *MockStore) GetSemesters(arg0 context.Context) ([]db.Semester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSemesters", arg0)
	ret0, _ := ret[0].([]db.Semester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSemesters indicates an expected call of GetSemesters.
func (mr *MockStoreMockRecorder) GetSemesters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSemesters", reflect.TypeOf((*MockStore)(nil).GetSemesters), arg0)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTeachers mocks base method.
func (m *MockStore) GetTeachers(arg0 context.Context, arg1 int64) ([]db.GetTeachersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeachers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTeachersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeachers indicates an expected call of GetTeachers.
func (mr *MockStoreMockRecorder) GetTeachers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeachers", reflect.TypeOf((*MockStore)(nil).GetTeachers), arg0, arg1)
}

// GetUserClassByUserRoleId mocks base method.
func (m *MockStore) GetUserClassByUserRoleId(arg0 context.Context, arg1 int64) (db.UserRoleClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClassByUserRoleId", arg0, arg1)
	ret0, _ := ret[0].(db.UserRoleClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserClassByUserRoleId indicates an expected call of GetUserClassByUserRoleId.
func (mr *MockStoreMockRecorder) GetUserClassByUserRoleId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClassByUserRoleId", reflect.TypeOf((*MockStore)(nil).GetUserClassByUserRoleId), arg0, arg1)
}

// GetUserRoleById mocks base method.
func (m *MockStore) GetUserRoleById(arg0 context.Context, arg1 int64) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleById", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleById indicates an expected call of GetUserRoleById.
func (mr *MockStoreMockRecorder) GetUserRoleById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleById", reflect.TypeOf((*MockStore)(nil).GetUserRoleById), arg0, arg1)
}

// GetUserRoleByUserId mocks base method.
func (m *MockStore) GetUserRoleByUserId(arg0 context.Context, arg1 int64) ([]db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleByUserId indicates an expected call of GetUserRoleByUserId.
func (mr *MockStoreMockRecorder) GetUserRoleByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleByUserId", reflect.TypeOf((*MockStore)(nil).GetUserRoleByUserId), arg0, arg1)
}

// GetUserbyEmail mocks base method.
func (m *MockStore) GetUserbyEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserbyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserbyEmail indicates an expected call of GetUserbyEmail.
func (mr *MockStoreMockRecorder) GetUserbyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserbyEmail", reflect.TypeOf((*MockStore)(nil).GetUserbyEmail), arg0, arg1)
}

// GetUserbyId mocks base method.
func (m *MockStore) GetUserbyId(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserbyId", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserbyId indicates an expected call of GetUserbyId.
func (mr *MockStoreMockRecorder) GetUserbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserbyId", reflect.TypeOf((*MockStore)(nil).GetUserbyId), arg0, arg1)
}

// ListAllClasses mocks base method.
func (m *MockStore) ListAllClasses(arg0 context.Context) ([]db.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClasses", arg0)
	ret0, _ := ret[0].([]db.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClasses indicates an expected call of ListAllClasses.
func (mr *MockStoreMockRecorder) ListAllClasses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClasses", reflect.TypeOf((*MockStore)(nil).ListAllClasses), arg0)
}

// ListSchools mocks base method.
func (m *MockStore) ListSchools(arg0 context.Context, arg1 db.ListSchoolsParams) ([]db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchools", arg0, arg1)
	ret0, _ := ret[0].([]db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchools indicates an expected call of ListSchools.
func (mr *MockStoreMockRecorder) ListSchools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchools", reflect.TypeOf((*MockStore)(nil).ListSchools), arg0, arg1)
}

// UpdateClassHeadTeacher mocks base method.
func (m *MockStore) UpdateClassHeadTeacher(arg0 context.Context, arg1 db.UpdateClassHeadTeacherParams) (db.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassHeadTeacher", arg0, arg1)
	ret0, _ := ret[0].(db.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassHeadTeacher indicates an expected call of UpdateClassHeadTeacher.
func (mr *MockStoreMockRecorder) UpdateClassHeadTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassHeadTeacher", reflect.TypeOf((*MockStore)(nil).UpdateClassHeadTeacher), arg0, arg1)
}

// UpdateCourseAbsencebyId mocks base method.
func (m *MockStore) UpdateCourseAbsencebyId(arg0 context.Context, arg1 int64) (db.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseAbsencebyId", arg0, arg1)
	ret0, _ := ret[0].(db.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseAbsencebyId indicates an expected call of UpdateCourseAbsencebyId.
func (mr *MockStoreMockRecorder) UpdateCourseAbsencebyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseAbsencebyId", reflect.TypeOf((*MockStore)(nil).UpdateCourseAbsencebyId), arg0, arg1)
}

// UpdateCourseMarksbyId mocks base method.
func (m *MockStore) UpdateCourseMarksbyId(arg0 context.Context, arg1 db.UpdateCourseMarksbyIdParams) (db.Mark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseMarksbyId", arg0, arg1)
	ret0, _ := ret[0].(db.Mark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCourseMarksbyId indicates an expected call of UpdateCourseMarksbyId.
func (mr *MockStoreMockRecorder) UpdateCourseMarksbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseMarksbyId", reflect.TypeOf((*MockStore)(nil).UpdateCourseMarksbyId), arg0, arg1)
}

// UpdateSchool mocks base method.
func (m *MockStore) UpdateSchool(arg0 context.Context, arg1 db.UpdateSchoolParams) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchool indicates an expected call of UpdateSchool.
func (mr *MockStoreMockRecorder) UpdateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchool", reflect.TypeOf((*MockStore)(nil).UpdateSchool), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockStore) UpdateUserEmail(arg0 context.Context, arg1 db.UpdateUserEmailParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockStoreMockRecorder) UpdateUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockStore)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserHeadTeacherRole mocks base method.
func (m *MockStore) UpdateUserHeadTeacherRole(arg0 context.Context, arg1 db.UpdateUserHeadTeacherRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserHeadTeacherRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserHeadTeacherRole indicates an expected call of UpdateUserHeadTeacherRole.
func (mr *MockStoreMockRecorder) UpdateUserHeadTeacherRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserHeadTeacherRole", reflect.TypeOf((*MockStore)(nil).UpdateUserHeadTeacherRole), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(arg0 context.Context, arg1 db.UpdateUserPasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), arg0, arg1)
}

// UpdateUserRoleClass mocks base method.
func (m *MockStore) UpdateUserRoleClass(arg0 context.Context, arg1 db.UpdateUserRoleClassParams) (db.UserRoleClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoleClass", arg0, arg1)
	ret0, _ := ret[0].(db.UserRoleClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRoleClass indicates an expected call of UpdateUserRoleClass.
func (mr *MockStoreMockRecorder) UpdateUserRoleClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoleClass", reflect.TypeOf((*MockStore)(nil).UpdateUserRoleClass), arg0, arg1)
}
