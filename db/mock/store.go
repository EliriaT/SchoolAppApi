// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/EliriaT/SchoolAppApi/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/EliriaT/SchoolAppApi/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateSchool mocks base method.
func (m *MockStore) CreateSchool(arg0 context.Context, arg1 string) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchool indicates an expected call of CreateSchool.
func (mr *MockStoreMockRecorder) CreateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchool", reflect.TypeOf((*MockStore)(nil).CreateSchool), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteSchool mocks base method.
func (m *MockStore) DeleteSchool(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchool indicates an expected call of DeleteSchool.
func (mr *MockStoreMockRecorder) DeleteSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchool", reflect.TypeOf((*MockStore)(nil).DeleteSchool), arg0, arg1)
}

// GetSchoolbyId mocks base method.
func (m *MockStore) GetSchoolbyId(arg0 context.Context, arg1 int64) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolbyId", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolbyId indicates an expected call of GetSchoolbyId.
func (mr *MockStoreMockRecorder) GetSchoolbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolbyId", reflect.TypeOf((*MockStore)(nil).GetSchoolbyId), arg0, arg1)
}

// GetSchoolbyName mocks base method.
func (m *MockStore) GetSchoolbyName(arg0 context.Context, arg1 string) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchoolbyName", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchoolbyName indicates an expected call of GetSchoolbyName.
func (mr *MockStoreMockRecorder) GetSchoolbyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchoolbyName", reflect.TypeOf((*MockStore)(nil).GetSchoolbyName), arg0, arg1)
}

// GetUserbyId mocks base method.
func (m *MockStore) GetUserbyId(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserbyId", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserbyId indicates an expected call of GetUserbyId.
func (mr *MockStoreMockRecorder) GetUserbyId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserbyId", reflect.TypeOf((*MockStore)(nil).GetUserbyId), arg0, arg1)
}

// ListSchools mocks base method.
func (m *MockStore) ListSchools(arg0 context.Context, arg1 db.ListSchoolsParams) ([]db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchools", arg0, arg1)
	ret0, _ := ret[0].([]db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchools indicates an expected call of ListSchools.
func (mr *MockStoreMockRecorder) ListSchools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchools", reflect.TypeOf((*MockStore)(nil).ListSchools), arg0, arg1)
}

// UpdateSchool mocks base method.
func (m *MockStore) UpdateSchool(arg0 context.Context, arg1 db.UpdateSchoolParams) (db.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchool", arg0, arg1)
	ret0, _ := ret[0].(db.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchool indicates an expected call of UpdateSchool.
func (mr *MockStoreMockRecorder) UpdateSchool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchool", reflect.TypeOf((*MockStore)(nil).UpdateSchool), arg0, arg1)
}
