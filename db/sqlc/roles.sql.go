// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: roles.sql

package db

import (
	"context"
)

const createRoles = `-- name: CreateRoles :many
INSERT INTO "Role"(
    name
)VALUES (
            $1
        ),
        (
            $2
        ),
        (
            $3
        ),
        (
            $4
        ),
        (
            $5
        )
 RETURNING id, name
`

type CreateRolesParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name2"`
	Name_3 string `json:"name3"`
	Name_4 string `json:"name4"`
	Name_5 string `json:"name5"`
}

func (q *Queries) CreateRoles(ctx context.Context, arg CreateRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, createRoles,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolebyId = `-- name: GetRolebyId :one
SELECT id, name FROM "Role"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRolebyId(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRolebyId, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name FROM "Role"
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
