// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User"(
    email, password, last_name, first_name, gender, phone_number, domicile, birth_date
)VALUES (
            $1,$2,$3,$4,$5,$6,$7,$8
        ) RETURNING id, email, password, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	LastName string `json:"lastName"`
	FirstName   string         `json:"firstName"`
	Gender      string         `json:"gender"`
	PhoneNumber sql.NullString `json:"phoneNumber"`
	Domicile    sql.NullString `json:"domicile"`
	BirthDate   time.Time      `json:"birthDate"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
		arg.PhoneNumber,
		arg.Domicile,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserbyId = `-- name: GetUserbyId :one
SELECT id, email, password, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at FROM "User"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserbyId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
