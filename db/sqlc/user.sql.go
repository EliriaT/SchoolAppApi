// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User"(
    email, password, totp_secret ,last_name, first_name, gender, phone_number, domicile, birth_date
)VALUES (
            $1,$2,$3,$4,$5,$6,$7,$8, $9
        ) RETURNING id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Email       string         `json:"email"`
	Password    string         `json:"password"`
	TotpSecret  string         `json:"totpSecret"`
	LastName    string         `json:"lastName"`
	FirstName   string         `json:"firstName"`
	Gender      string         `json:"gender"`
	PhoneNumber sql.NullString `json:"phoneNumber"`
	Domicile    sql.NullString `json:"domicile"`
	BirthDate   sql.NullTime   `json:"birthDate"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.TotpSecret,
		arg.LastName,
		arg.FirstName,
		arg.Gender,
		arg.PhoneNumber,
		arg.Domicile,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.TotpSecret,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getTeachers = `-- name: GetTeachers :many
Select "User".id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at, "UserRoles".id, user_id, role_id, school_id, "Role".id, name, "UserRoleClass".id, user_role_id, class_id from "User"
INNER JOIN "UserRoles"
ON  "User".id = "UserRoles".user_id and "UserRoles".school_id = $1
INNER JOIN "Role"
ON  "UserRoles".role_id = "Role".id and ("Role".name = "Teacher" or "Role".name = "Director" or "Role".name = "School_Manager")
LEFT JOIN "UserRoleClass"
on "UserRoleClass".user_role_id = "UserRoles".id
WHERE "UserRoleClass".user_role_id is Null
`

type GetTeachersRow struct {
	ID                int64          `json:"id"`
	Email             string         `json:"email"`
	Password          string         `json:"password"`
	TotpSecret        string         `json:"totpSecret"`
	LastName          string         `json:"lastName"`
	FirstName         string         `json:"firstName"`
	Gender            string         `json:"gender"`
	PhoneNumber       sql.NullString `json:"phoneNumber"`
	Domicile          sql.NullString `json:"domicile"`
	BirthDate         sql.NullTime   `json:"birthDate"`
	PasswordChangedAt time.Time      `json:"passwordChangedAt"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         sql.NullTime   `json:"updatedAt"`
	ID_2              int64          `json:"id2"`
	UserID            int64          `json:"userID"`
	RoleID            int64          `json:"roleID"`
	SchoolID          int64          `json:"schoolID"`
	ID_3              int64          `json:"id3"`
	Name              string         `json:"name"`
	ID_4              sql.NullInt64  `json:"id4"`
	UserRoleID        sql.NullInt64  `json:"userRoleID"`
	ClassID           sql.NullInt64  `json:"classID"`
}

func (q *Queries) GetTeachers(ctx context.Context, schoolID int64) ([]GetTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeachers, schoolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTeachersRow{}
	for rows.Next() {
		var i GetTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.TotpSecret,
			&i.LastName,
			&i.FirstName,
			&i.Gender,
			&i.PhoneNumber,
			&i.Domicile,
			&i.BirthDate,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.UserID,
			&i.RoleID,
			&i.SchoolID,
			&i.ID_3,
			&i.Name,
			&i.ID_4,
			&i.UserRoleID,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserbyEmail = `-- name: GetUserbyEmail :one
SELECT id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at FROM "User"
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.TotpSecret,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserbyId = `-- name: GetUserbyId :one
SELECT id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at FROM "User"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserbyId(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.TotpSecret,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE  "User"
SET  email = $2, updated_at = now()
where id = $1
RETURNING id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.TotpSecret,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE  "User"
SET  password = $2, updated_at = now()
where id = $1
RETURNING id, email, password, totp_secret, last_name, first_name, gender, phone_number, domicile, birth_date, password_changed_at, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.TotpSecret,
		&i.LastName,
		&i.FirstName,
		&i.Gender,
		&i.PhoneNumber,
		&i.Domicile,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
