// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: school.sql

package db

import (
	"context"
)

const createSchool = `-- name: CreateSchool :one
INSERT INTO "School"(
    name
)VALUES (
    $1
) RETURNING id, name, created_by, updated_by, created_at, updated_at
`

func (q *Queries) CreateSchool(ctx context.Context, name string) (School, error) {
	row := q.db.QueryRowContext(ctx, createSchool, name)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchool = `-- name: DeleteSchool :exec
DELETE FROM "School"
WHERE id = $1
`

func (q *Queries) DeleteSchool(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchool, id)
	return err
}

const getSchoolbyId = `-- name: GetSchoolbyId :one
SELECT id, name, created_by, updated_by, created_at, updated_at FROM "School"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSchoolbyId(ctx context.Context, id int64) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolbyId, id)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchoolbyName = `-- name: GetSchoolbyName :one
SELECT id, name, created_by, updated_by, created_at, updated_at FROM "School"
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSchoolbyName(ctx context.Context, name string) (School, error) {
	row := q.db.QueryRowContext(ctx, getSchoolbyName, name)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSchools = `-- name: ListSchools :many
SELECT id, name, created_by, updated_by, created_at, updated_at FROM "School"
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListSchoolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSchools(ctx context.Context, arg ListSchoolsParams) ([]School, error) {
	rows, err := q.db.QueryContext(ctx, listSchools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []School
	for rows.Next() {
		var i School
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchool = `-- name: UpdateSchool :one
UPDATE  "School"
SET  name = $2, updated_at = now()
where id = $1
RETURNING id, name, created_by, updated_by, created_at, updated_at
`

type UpdateSchoolParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateSchool(ctx context.Context, arg UpdateSchoolParams) (School, error) {
	row := q.db.QueryRowContext(ctx, updateSchool, arg.ID, arg.Name)
	var i School
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
